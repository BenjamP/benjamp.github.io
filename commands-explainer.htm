<!DOCTYPE html>
<html lang="en" typeof="bibo:Document " about="" property="dcterms:language" content="en">
<head>
    <meta charset="utf-8">
    <title>Commands Explainer</title>
    
    
  <style>/*****************************************************************
 * ReSpec 3 CSS
 * Robin Berjon - http://berjon.com/
 *****************************************************************/

/* --- INLINES --- */
em.rfc2119 { 
    text-transform:     lowercase;
    font-variant:       small-caps;
    font-style:         normal;
    color:              #900;
}

h1 acronym, h2 acronym, h3 acronym, h4 acronym, h5 acronym, h6 acronym, a acronym,
h1 abbr, h2 abbr, h3 abbr, h4 abbr, h5 abbr, h6 abbr, a abbr {
    border: none;
}

dfn {
    font-weight:    bold;
}

a.internalDFN {
    color:  inherit;
    border-bottom:  1px solid #99c;
    text-decoration:    none;
}

a.externalDFN {
    color:  inherit;
    border-bottom:  1px dotted #ccc;
    text-decoration:    none;
}

a.bibref {
    text-decoration:    none;
}

cite .bibref {
    font-style: normal;
}

code {
    color:  #ff4500;
}

/* --- TOC --- */
.toc a, .tof a {
    text-decoration:    none;
}

a .secno, a .figno {
    color:  #000;
}

ul.tof, ol.tof {
    list-style: none outside none;
}

.caption {
    margin-top: 0.5em;
    font-style:   italic;
}

/* --- TABLE --- */
table.simple {
    border-spacing: 0;
    border-collapse:    collapse;
    border-bottom:  3px solid #005a9c;
}

.simple th {
    background: #005a9c;
    color:  #fff;
    padding:    3px 5px;
    text-align: left;
}

.simple th[scope="row"] {
    background: inherit;
    color:  inherit;
    border-top: 1px solid #ddd;
}

.simple td {
    padding:    3px 10px;
    border-top: 1px solid #ddd;
}

.simple tr:nth-child(even) {
    background: #f0f6ff;
}

/* --- DL --- */
.section dd > p:first-child {
    margin-top: 0;
}

.section dd > p:last-child {
    margin-bottom: 0;
}

.section dd {
    margin-bottom:  1em;
}

.section dl.attrs dd, .section dl.eldef dd {
    margin-bottom:  0;
}

@media print {
    .removeOnSave {
        display: none;
    }
}
</style><style>/* --- ISSUES/NOTES --- */
div.issue-title, div.note-title {
    padding-right:  1em;
    min-width: 7.5em;
    color: #b9ab2d;
}
div.issue-title { color: #e05252; }
div.note-title { color: #2b2; }
div.issue-title span, div.note-title span {
    text-transform: uppercase;
}
div.note, div.issue {
    margin-top: 1em;
    margin-bottom: 1em;
}
.note > p:first-child, .issue > p:first-child { margin-top: 0 }
.issue, .note {
    padding: .5em;
    border-left-width: .5em;
    border-left-style: solid;
}
div.issue, div.note {
    padding: 1em 1.2em 0.5em;
    margin: 1em 0;
    position: relative;
    clear: both;
}
span.note, span.issue { padding: .1em .5em .15em; }

.issue {
    border-color: #e05252;
    background: #fbe9e9;
}
.note {
    border-color: #52e052;
    background: #e9fbe9;
}


</style><link rel="stylesheet" href="https://www.w3.org/StyleSheets/TR/W3C-ED"><!--[if lt IE 9]><script src='https://www.w3.org/2008/site/js/html5shiv.js'></script><![endif]--></head>
  <body class="h-entry" role="document" id="respecDocument"><div class="head" role="contentinfo" id="respecHeader">
  <p>
    
      <a href="http://www.w3.org/"><img width="72" height="48" src="https://www.w3.org/Icons/w3c_home" alt="W3C"></a>
    
  </p>
  <h1 class="title p-name" id="title" property="dcterms:title">Commands Explainer</h1>
  
  <h2 property="dcterms:issued" datatype="xsd:dateTime" content="2014-05-23T06:44:36.000Z" id="w3c-editor-s-draft-22-may-2014"><abbr title="World Wide Web Consortium">W3C</abbr> Editor's Draft <time class="dt-published" datetime="2014-05-22">22 May 2014</time></h2>
  <dl>
    
      <dt>This version:</dt>
      <dd><a class="u-url" href=""></a></dd>
      <dt>Latest published version:</dt>
      <dd><a href="http://www.w3.org/TR/commands-explainer/">http://www.w3.org/TR/commands-explainer/</a></dd>
    
    
    
    
    
    
      
    
    
    
    <dt>Editor:</dt>
    <dd class="p-author h-card vcard" rel="bibo:editor" inlist=""><span typeof="foaf:Person"><span property="foaf:name" class="p-name fn">Ben Peters</span>, <a rel="foaf:workplaceHomepage" class="p-org org h-org h-card" href="http://www.microsoft.com">Microsoft</a>, <span class="ed_mailto"><a class="u-email email" rel="foaf:mbox" href="mailto:BenjamP@microsoft.com">BenjamP@microsoft.com</a></span></span>
</dd>

    
    
  </dl>
  
  
  
  
    
      <p class="copyright">
        <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> ©
        2014
        
        <a href="http://www.w3.org/"><abbr title="World Wide Web Consortium">W3C</abbr></a><sup>®</sup>
        (<a href="http://www.csail.mit.edu/"><abbr title="Massachusetts Institute of Technology">MIT</abbr></a>,
        <a href="http://www.ercim.eu/"><abbr title="European Research Consortium for Informatics and Mathematics">ERCIM</abbr></a>,
        <a href="http://www.keio.ac.jp/">Keio</a>, <a href="http://ev.buaa.edu.cn/">Beihang</a>), 
        
          Some Rights Reserved: this document is dual-licensed,
          <a href="https://creativecommons.org/licenses/by/3.0/">CC-BY</a> and 
          <a href="http://www.w3.org/Consortium/Legal/copyright-documents"><abbr title="World Wide Web Consortium">W3C</abbr> Document License</a>.
        
        <abbr title="World Wide Web Consortium">W3C</abbr> <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</a>,
        <a href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademark</a> and
        
          <a href="http://www.w3.org/Consortium/Legal/2013/copyright-documents-dual.html">document use</a>
        
        rules apply.
      </p>
    
  
  <hr>
</div>
    <section id="abstract" class="introductory" property="dcterms:abstract" datatype="" typeof="bibo:Chapter" resource="#abstract" rel="bibo:Chapter"><h2 aria-level="1" role="heading" id="h2_abstract">Abstract</h2>
      <p>
        This document is a non-normative reference, which provides an overview of CommandEvents and contenteditable=minimal. 
        It summarizes the normative information in the respective specifications in easy-to-digest prose with illustrations.
      </p>
    </section><section id="sotd" class="introductory" typeof="bibo:Chapter" resource="#sotd" rel="bibo:Chapter"><h2 aria-level="1" role="heading" id="h2_sotd">Status of This Document</h2>
  
    
      
        <p>
          <em>This section describes the status of this document at the time of its publication.
          Other documents may supersede this document. A list of current <abbr title="World Wide Web Consortium">W3C</abbr> publications and the
          latest revision of this technical report can be found in the <a href="http://www.w3.org/TR/"><abbr title="World Wide Web Consortium">W3C</abbr> technical reports index</a> at
          http://www.w3.org/TR/.</em>
        </p>
        
      <p>
        
      </p>
    
        <p>
          This document was published by the <a href=""></a> as an Editor's Draft.
          
          
            If you wish to make comments regarding this document, please send them to 
            <a href="mailto:public-webapps@w3.org">public-webapps@w3.org</a> 
            (<a href="mailto:public-webapps-request@w3.org?subject=subscribe">subscribe</a>,
            <a href="http://lists.w3.org/Archives/Public/public-webapps/">archives</a>).
          
          
          
          
            All comments are welcome.
          
        </p>
        
        
          <p>
            Publication as an Editor's Draft does not imply endorsement by the <abbr title="World Wide Web Consortium">W3C</abbr>
            Membership. This is a draft document and may be updated, replaced or obsoleted by other
            documents at any time. It is inappropriate to cite this document as other than work in
            progress.
          </p>
        
        
        
        <p>
          
            This document was produced by a group operating under the 
            <a id="sotd_patent" about="" rel="w3p:patentRules" href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 <abbr title="World Wide Web Consortium">W3C</abbr> Patent
            Policy</a>.
          
          
          
            
              <abbr title="World Wide Web Consortium">W3C</abbr> maintains a <a href="http://www.w3.org/2004/01/pp-impl/40318/status" rel="disclosure">public list of any patent
              disclosures</a> 
            
            made in connection with the deliverables of the group; that page also includes
            instructions for disclosing a patent. An individual who has actual knowledge of a patent
            which the individual believes contains
            <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">Essential
            Claim(s)</a> must disclose the information in accordance with
            <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section
            6 of the <abbr title="World Wide Web Consortium">W3C</abbr> Patent Policy</a>.
          
          
        </p>
        
      
    
  
</section><section id="toc"><h2 class="introductory" aria-level="1" role="heading" id="h2_toc">Table of Contents</h2><ul class="toc" role="directory" id="respecContents"><li class="tocline"><a href="#introduction" class="tocxref"><span class="secno">1. </span>Introduction</a></li><li class="tocline"><a href="#framing-the-problem" class="tocxref"><span class="secno">2. </span>Framing the Problem</a><ul class="toc"><li class="tocline"><a href="#ways-a-user-can-indicate-their-intentions" class="tocxref"><span class="secno">2.1 </span>Ways a User Can Indicate Their Intentions</a></li><li class="tocline"><a href="#default-handling-of-user-intentions" class="tocxref"><span class="secno">2.2 </span>Default Handling of User Intentions</a></li><li class="tocline"><a href="#difficulty-in-overriding-default-handling-in-script" class="tocxref"><span class="secno">2.3 </span>Difficulty in Overriding Default Handling in Script</a></li></ul></li><li class="tocline"><a href="#intention-events" class="tocxref"><span class="secno">3. </span>Intention Events</a><ul class="toc"><li class="tocline"><a href="#overview" class="tocxref"><span class="secno">3.1 </span>Overview</a></li><li class="tocline"><a href="#clipboard-events" class="tocxref"><span class="secno">3.2 </span>Clipboard Events</a></li><li class="tocline"><a href="#selection-events" class="tocxref"><span class="secno">3.3 </span>Selection Events</a></li><li class="tocline"><a href="#commandevents" class="tocxref"><span class="secno">3.4 </span>CommandEvents</a></li><li class="tocline"><a href="#sample-intention-events" class="tocxref"><span class="secno">3.5 </span>Sample Intention Events</a></li><li class="tocline"><a href="#ways-to-fire-intention-events" class="tocxref"><span class="secno">3.6 </span>Ways to Fire Intention Events</a><ul class="toc"><li class="tocline"><a href="#well-known-sources" class="tocxref"><span class="secno">3.6.1 </span>Well-known Sources</a></li><li class="tocline"><a href="#custom-sources-with-execcommand" class="tocxref"><span class="secno">3.6.2 </span>Custom Sources with <code>execCommand</code></a></li><li class="tocline"><a href="#the-command-object" class="tocxref"><span class="secno">3.6.3 </span>The <code>Command</code> Object</a></li></ul></li></ul></li><li class="tocline"><a href="#minimal-default-handling-with-contenteditable-minimal" class="tocxref"><span class="secno">4. </span>Minimal default handling with <code>contenteditable="minimal"</code></a></li></ul></section>
    
    <section id="introduction">
      <!--OddPage--><h2 aria-level="1" role="heading" id="h2_introduction"><span class="secno">1. </span>Introduction</h2>
      <p>
        ContentEditable is used extensively on the web to enable users to directly edit HTML content. 
        However, it is very complex and its behavior is often largely overwritten by sites or javascript frameworks. 
        Completely overwriting it is very difficult because it requires overwriting all keyboard shortcuts that perform commands like bold and undo, 
        as well as the context menu. Further, this must be done in all supported languages. 
		A <a href="https://medium.com/medium-eng/122d8a40e480">post</a> on Medium tells one perspective of why it should be changed.
        </p><p>
		To simplify this, a new level of abstraction is described in the CommandEvent specification (coming soon), 
        which allows overwriting the behavior of individual user intentions.
        </p><p>
		To further simplify the work for sites and frameworks that wish to override functionality for the majority of commands, 
        the Minimal ContentEditable specification disables all commands by default, including text input. 
        This allows sites to easily provide their own implementations of commands as well as opt in to commands that they prefer the browser to handle,
		without having to worry about what they might have missed.
      </p>
    </section>
    <section id="framing-the-problem">
      <!--OddPage--><h2 aria-level="1" role="heading" id="h2_framing-the-problem"><span class="secno">2. </span>Framing the Problem</h2>
        <section id="ways-a-user-can-indicate-their-intentions">
        <h3 aria-level="2" role="heading" id="h3_ways-a-user-can-indicate-their-intentions"><span class="secno">2.1 </span>Ways a User Can Indicate Their Intentions</h3>
        <p>
        There are several different ways users can indicate that they are trying to perform a given action. 
        For instance, a user may press control-z on a Windows English keyboard to indicate that they would like to undo the latest action in the current context. 
        They may also use an undo item in a context menu for this. 
        In other languages, the keyboard shortcut may vary. 
        There may also be gestures for these intentions on various platforms, such as 'shake' on iOS. 
        </p><p>
		Shown below are some input methods and theoretical ways they could be used to select a word:
		</p><p>
		<img src="images/input_methods.png">
		</p>
        </section><section id="default-handling-of-user-intentions">
        <h3 aria-level="2" role="heading" id="h3_default-handling-of-user-intentions"><span class="secno">2.2 </span>Default Handling of User Intentions</h3>
        <p>
        By default, browsers handle a large number of user intentions, like typing and formatting text in editable regions, clipboard operations, and selection.
        Browsers have the built-in capability to understand a user's intention based on their localized input. 
		Browsers then use that understanding to perform the associated action, such as actually selecting the word in the example above.
        </p>
        </section><section id="difficulty-in-overriding-default-handling-in-script">
        <h3 aria-level="2" role="heading" id="h3_difficulty-in-overriding-default-handling-in-script"><span class="secno">2.3 </span>Difficulty in Overriding Default Handling in Script</h3>
        In order to override default handling of an intention, a site must be aware of that intention.
		Today, it is very difficult for a website to detect a user's intention directly. 
        Instead, they must infer it based on keyboard, pointer, input, mutation, or other events. 
		Keyboard events must be understood in a localized context. 
        And in some cases, such as actions on the browser's context menu, the user's intention can't be inferred because script is not made aware of the intention at all.  
        <p></p>
        </section>
    </section>
    <section id="intention-events">
      <!--OddPage--><h2 aria-level="1" role="heading" id="h2_intention-events"><span class="secno">3. </span>Intention Events</h2>
        <section id="overview">
		<h3 aria-level="2" role="heading" id="h3_overview"><span class="secno">3.1 </span>Overview</h3>
        <p>In order to solve this problem, JavaScript needs a new level of abstraction for user intentions. 
		Intention Events are that abstraction. 
		There are several types of Intention Events, including Clipboard, Selection, and Command. 
		Building on the concepts that already exist in Clipboard Events and those that are being specified by <a href="http://w3c.github.io/selection-api/">Selection API</a>,
		we complete the picture with CommandEvent.
		The picture now looks like this:
		</p><p>
            <img src="images/intention_events_concept.png">
        </p>
        </section><section id="clipboard-events">
        <h3 aria-level="2" role="heading" id="h3_clipboard-events"><span class="secno">3.2 </span>Clipboard Events</h3>
        In order to assist in determining what a user intends, browsers already fire some events for user intentions, like Clipboard Events. 
		The 'type' of a Clipboard Event indicates the user's intention.
        </section><section id="selection-events">
        <h3 aria-level="2" role="heading" id="h3_selection-events"><span class="secno">3.3 </span>Selection Events</h3>
		BeforeSelectionChange events will also help determine a user's intention. They are being considered for the Selection API spec.
		A 'type' property of a Selection Event can indicate the user's intention, such as extendSelection.
        </section><section id="commandevents">
        <h3 aria-level="2" role="heading" id="h3_commandevents"><span class="secno">3.4 </span>CommandEvents</h3>
        Just like for Clipboard and Selection, a user's intention to execute commands (like those found on a toolbar) should be easily understandable by script.
		This allows sites to overwrite behavior as they see fit.
		For instance, if a site wants to manage the way bolding text works, they can list for a CommandEvent of type="bold",
		execute their own custom bold functionality, and preventDefault().
		They no longer need to listen for control+b on English keyboards or something else in other locales.
		Any platform-specific bold toolbars or gestures just work with their CommandEvent implementation as well.
        <div class="issue"><div class="issue-title" aria-level="3" role="heading" id="h_issue_1"><span>Issue 1</span></div><p class="">Should typing by handled by CommandEvent, or should we use something else? 
		Does the fact that "insertText" is available in execCommand mean that a CommandEvent of type "insertText" should be used for typing?</p></div>
		<div class="issue"><div class="issue-title" aria-level="3" role="heading" id="h_issue_2"><span>Issue 2</span></div><p class="">How do IMEs fit in here?</p></div>
		</section><section id="sample-intention-events">
		<h3 aria-level="2" role="heading" id="h3_sample-intention-events"><span class="secno">3.5 </span>Sample Intention Events</h3>
		Here a list of some sample Intention Events:<br>
		CommandEvent; type=insertText; used for typing text<br>
		CommandEvent; type=insertNewline <br>
		CommandEvent; type=italic<br>
		ClipboardEvent; type=copy<br>
		BeforeSelectionChangeEvent; type=extendSelection; similar to Selection.extend, works with keyboard/pointer input<br>		
		</section><section id="ways-to-fire-intention-events">
		<h3 aria-level="2" role="heading" id="h3_ways-to-fire-intention-events"><span class="secno">3.6 </span>Ways to Fire Intention Events</h3>
		<section id="well-known-sources">
		<h4 aria-level="3" role="heading" id="h4_well-known-sources"><span class="secno">3.6.1 </span>Well-known Sources</h4>
		Intention Events will be fired by browsers for all well-known ways a user would indicate their intention. 
		For instance, control+c would fire a Keyboard Event, and if preventDefault() is not called,
		it would then fire a ClipboardEvent of type "copy". 
		Similarly, the "shake" gesture on iOS would fire a CommandEvent of type "undo".
		</section><section id="custom-sources-with-execcommand">
		<h4 aria-level="3" role="heading" id="h4_custom-sources-with-execcommand"><span class="secno">3.6.2 </span>Custom Sources with <code>execCommand</code></h4>
		<p>
		Different sites and apps have different ways that users indicate their intentions.
		For instance, a toolbar on an email site might have formatting buttons,
		or a code editor app might have different keyboard shortcuts.
		In order to enable web developers to fire their own Intention Events when their users are indicating an intention,
		execCommand will cause Intention Events to be fired.
		</p><p>
		For example, clicking this button
		<code></code></p><pre><code>&lt;input type="button" onclick="execCommand('bold')" value="b"&gt;</code></pre>
		would fire a CommandEvent of type "bold", and if preventDefault is not called on that CommandEvent,
		then the browser would perform its default action for bold.
		<p></p><p>
		Further, if a keyboard shortcut indicates a different intention for a given site or app,
		it can be overwritten like this:<br>
		<code></code></p><pre><code>function handleKeydown(evt) {
    if (evt.ctrlKey &amp;&amp; evt.key === "s") {
	    document.execCommand('strikeThrough');
	    evt.preventDefault();
    }
}</code></pre>
		Now control+s is bound to strikeThrough instead of its default.		
		<p></p><p>
		</p><div class="issue"><div class="issue-title" aria-level="4" role="heading" id="h_issue_3"><span>Issue 3</span></div><p class="">Is execCommand the right answer here, or should we have a new API?</p></div>		
		<p></p>
		</section><section id="the-command-object">
		<h4 aria-level="3" role="heading" id="h4_the-command-object"><span class="secno">3.6.3 </span>The <code>Command</code> Object</h4>
		<p>
		Some Intention Events will have more information than just a <code>type</code>. 
		In order to encapsulate this data, a new object called <code>Command</code> will be used.
		An update to <code>execCommand</code> will allow an alternative signature for this method, as follows:
		<code></code></p><pre><code>document.execCommand('name', Command)</code></pre>
		where Command is represented by JSON and can contain relevant information for the command.
		<p></p><p>
		Each Intention Event type (Clipboard, Selection, and Command) will have a new property for getting this object, <code>commandData</code>.
		</p><p>
		For example, a paste Clipboard Event can be fired with multiple formats, like this:<br>
		document.execCommand('copy', {'text/plain':'Hello', 'text/html&lt;p&gt;&lt;b&gt;Hello&lt;/b&gt;&lt;/p&gt;'});<br>
		</p>
		<div class="issue"><div class="issue-title" aria-level="4" role="heading" id="h_issue_4"><span>Issue 4</span></div><p class="">Should we include the default result in the Command object? For instance, a Range that represents what the selection would be after a Selection event?<br>
		From: Piotrek Koszuliński, CKEditor JavaScript Lead Developer</p></div>				
		</section>
		</section>
    </section><section id="minimal-default-handling-with-contenteditable-minimal">
      <!--OddPage--><h2 aria-level="1" role="heading" id="h2_minimal-default-handling-with-contenteditable-minimal"><span class="secno">4. </span>Minimal default handling with <code>contenteditable="minimal"</code></h2>
        <p>
        It is a pattern in web editors that are built on top of contenteditable to disable some commanding functionality. 
		The reason for this is that consistency for WYSIWYG editors is very hard, and requirements vary greatly from one app to the next.
		Disabling all functionality is very difficult, however.
		</p><p>
		In order to make it easier, contentEditable="minimal" on an element will fire all Intention Events (Selection, Clipboard, and Command),
		but only Selection events will have a default action.
		As is always the case with Intention Events, the default action for Selection events can be cancelled with preventDefault().
		The browser's typical handling of Clipboard and Command events can also be enabled per command by calling document.execCommand(evt.commandName).
		</p>
		<div class="issue"><div class="issue-title" aria-level="2" role="heading" id="h_issue_5"><span>Issue 5</span></div><p class="">Which Intention Events should have default actions in contentEditable="minimal"? Just selection events, or other events like typing characters? What about inserting newlines? Backspace/delete?</p></div>
		<p>
		The browser's typical handling of Clipboard and Command events can also be enabled per command by calling document.execCommand(evt.commandName).
        </p>
		<div class="issue"><div class="issue-title" aria-level="2" role="heading" id="h_issue_6"><span>Issue 6</span></div><p class="">execCommand here will cause another Intention Event to be fired. How should we handle this?</p></div>
    </section>
  
</body></html>